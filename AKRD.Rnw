%% LyX 2.2.2 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[12pt,english]{report}
\usepackage{mathptmx}
\usepackage[T1]{fontenc}
\usepackage[letterpaper]{geometry}
\geometry{verbose,tmargin=3.54cm,bmargin=2.54cm,lmargin=2.54cm,rmargin=2.54cm,headheight=1cm,headsep=2cm,footskip=0.5cm}
\usepackage{fancyhdr}
\pagestyle{fancy}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{color}
\usepackage{verbatim}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\input colordvi
\usepackage{color}
\fancyhead{}
\fancyfoot[CE,CO]{}
\newtoks{\topicofnote} \global\topicofnote={}
\newdimen\longindent \longindent=3.5truein
\fancyhead[L]{Aircraft Algorithm Memo re: \the\topicofnote \\ \datetoday \\ Page \thepage \hfill}
\renewcommand{\headrulewidth}{0.0pt}
\newenvironment{lyxlist}[1]
{\begin{list}{}
{\settowidth{\labelwidth}{#1}
\setlength{\leftmargin}{\labelwidth}
\addtolength{\leftmargin}{\labelsep}
\renewcommand{\makelabel}[1]{##1\hfil}}}
{\end{list}}
\newcommand{\datetoday}{\number\day\space
     \ifcase\month\or January\or February\or March\or April\or May\or
     June\or July\or August\or September\or October\or November\or
     December\fi
     \space\number\year}
\newcommand{\RAFAlgorithmMemo}{\null \vskip-1.5truein
{\raggedright \textsf{\textsc{\large \textcolor{blue}{Research Aviation Facility}}}}\par
{\raggedright \textsf{\textsl{\textcolor{blue}{Algorithm Memorandum:}}}} \par \vskip6pt
{\color{blue}{\hrule}}\par
\vskip0.2truein\leftline{\textcolor{blue}{\textsf{Subject: \the\topicofnote}}}
\leftline{\textcolor{blue}{\textsf{Al Cooper}}}
\leftline{\textcolor{blue}{\textsf{\datetoday}}} \vskip0.2truein
\thispagestyle{empty}}
\newcommand{\attachm}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachments:] {#1}
\end{lyxlist}}
\newcommand{\cc}[1]{\begin{lyxlist}{Attachments:00}
\item [cc:] {#1}
\end{lyxlist}}
\newcommand{\attach}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachment:] {#1}
\end{lyxlist}}
%usage: \encl{A\\B\\C} or \cc{ma,e1\\name2\\name3}

\makeatother

\usepackage{babel}
\begin{document}
\begin{comment}
set topicofnote to topic of note
\end{comment}

\topicofnote={AKRD/WIY Processor}

\RAFAlgorithmMemo

\section*{Overview}

The routine that produced this note, AKRD.Rnw, implements second-pass
processing for AKRD using a complementary-filter approach and produces
this document to describe the process and give the coefficients and
formulas. For reference, the ``standard'' representtion in use for
several years has been

\[
\alpha=c_{0}+\frac{\Delta p_{\alpha}}{q}\left(c_{1}+c_{2}M\right)
\]
and the coefficients were found by fitting that formula to a reference
that assumes there is zero vertical wind:\\
\[
\alpha^{*}=\theta-\frac{w_{p}}{V}
\]

Instead, here the reference value is split into two components, $\alpha^{*}=\alpha_{f}^{*}+\alpha_{s}^{*}$
that result from applying a Butterworth low-pass filter to $\alpha^{*}$
(in the code, the variable AOAREF) to obtain $\alpha_{s}^{*}$ and
then finding $\alpha_{f}^{*}$from $\alpha_{f}^{*}=\alpha^{*}-\alpha_{s}^{*}$.
These components are then represented by separate fits:

\begin{equation}
\alpha_{f}=c_{1}\left(\frac{\mathrm{\{ADIFR\}}}{\mathrm{\{QCF\}}}\right)_{f}\label{eq:alpha-fast}
\end{equation}
\begin{equation}
\alpha_{s}=d_{0}+d_{1}\left(\frac{\mathrm{\{ADIFR\}}}{\mathrm{\{QCF\}}}\right)_{s}+d_{2}\mathrm{\{QCF\}}_{s}\label{eq:alpha-slow}
\end{equation}
where the $f$ and $s$ subscripts represent the high-pass and low-pass
components after filtering. More complicated representations were
tested in both cases, but these appear to provide adequate fits without
additional terms.

This approach has two advantages:
\begin{enumerate}
\item The important sensitivity to fluctuations is not compromised by efforts
to represent the slowly varying zero level for angle of attack.
\item The slowly varying zero reference can be represented by more complex
equations without needing to apply those to the high-frequency component.
\end{enumerate}
The result is an empirical representation that is appropriate for
all recent GV projects and that does not need to be changed for each
project, as has been the case for many recent projects that use the
standard representation. 

\section*{Data used in the fit}

The first step is to assemble the data to be used for fitting. The
dataset should include as many flights and projects as is reasonable,
but should be reviewed also to eliminate flights that appear anomalous
because of problems with the measurements, strong updrafts and downdrafts,
special loading conditions, or other aspects of the flights that make
them different from the ``best'' flights.

In this case, measurements from ORCAS, CSET and DEEPWAVE were used.
For CSET, the selected flights were 1, 2, 3, 4, 6, 10, 12, and 16.
For ORCAS, flights 1, 2, 3, 6, 8, 9, 11, 14, and 16 were selected.
For DEEPWAVE, all 26 flights were used excepting 6, 7, 15, and 23.
To use different flights in the future, changes to the 'Project' statements
and 'best' statements will be needed, and in addition it will be necessary
to change the logical variables 'NewCoefficients' and 'ReloadData'
to TRUE. Otherwise, this program skips recalculation of the coefficients
and just retrieves them from the file './AKRD-fit-coef.Rdata' where
they have been stored by a previous run. The process of constructing
the data.frame used in the fit, not necessary if those previously
determined coefficients are to be used, was as follows:
\begin{enumerate}
\item Read the netCDF file as on /scr/raf\_data/\{Project\}, for each flight
in CSET and ORCAS (not just the ones listed above).\footnote{For ORCAS flight 12, the available netCDF file was bad and couldn't
be read, so that flight was skipped.} 
\item For each file, add appropriate variables for fitting (QR=ADIFR/QCF,
M=Mach number using uncorrected pressures, AOAREF=PITCH-(GGVSPD/TASF){*}180/$\pi$,
QCF) and the low-pass and high-pass components of these produced by
a Butterworth third-order filter with cutoff frequency of 1/600 Hz.
A version of the filter was used that made two passes, one forward
and one backward, through the data and combined the results.
\item The file was truncated to include only data spanning from the first
measurement of airspeed above 90~m/s to the last, to avoid periods
when the aircraft was still on the ground or just after take-off.
\item A variable representing flight number was added to each file. To avoid
ambiguity between projects, ORCAS flights were assigned numbers equal
to 100 plus the flight number. This variable, named RF, then made
it possible to identify individual flights after all were concatenated.
\item The individual flights were then concatenated into one data.frame
containing only the variables needed for fitting and a few others
used while examining the results. The variables in the data.frame
were ADIFR, AKRD, GGALT, GGVSPD, PITCH, PSF, QCF, ROLL, SSLIP, TASF,
TASX, THDG, WIC, and those added in step 2 above.
\item From this data frame, another (called DF) was constructed to use in
fitting. It consisted only of the 17 selected flights listed above.
In addition, measurements spanning 600~s from the start and end of
each file were removed to avoid periods where end-effects seemed to
cause problems with the filtered results and also to avoid problematic
periods during initial climb and final descent, which otherwise seemed
to distort the fits.
\item The final data.frame (DF) was then restricted to measurements with
TASF > 110 and ROLL between -2 and 2$^{\circ}$, to avoid possible
periods of slow flight or in turns. Turns in particular invalidate
the fit assumption involved in finding the reference (AOAREF) used
for the fit, so these need to be excluded or turns cause serious distortion
of the results.
\end{enumerate}
<<initialization, include=FALSE>>=

require(knitr)
opts_chunk$set(echo=FALSE, include=FALSE, fig.lp="fig:", dev='png', dpi=100)
opts_chunk$set(fig.width=6, fig.height=5, fig.pos="center", digits=4)
options(digits=5)
thisFileName <- "AKRD"
require(Ranadu, quietly = TRUE, warn.conflicts=FALSE)
require(ggplot2)
require(grid)
require(ggthemes)
ReviseProjects <- c('DC3', 'TORERO')  ## these are the projects to process 
nP <- length (ReviseProjects)
# ReviseProjects <- 'ORCAS'
Directory <- DataDirectory ()			
VarList <- c("ADIFR", "GGVSPD", "PITCH", "QCF", "PSF", "AKRD", "WIC", "TASF", "GGALT", "ROLL", "PSXC", "ATX", "QCXC")
## add variables needed to recalculate wind
VarList <- c(VarList, "TASX", "ATTACK", "SSLIP", "GGVEW", "GGVNS", "VEW", "VNS", "THDG")
SaveRData <- sprintf("%s.Rdata", thisFileName)
## this controls if new coefficients are calculated and associated plots made:
NewCoefficients <- FALSE
#NewCoefficients <- TRUE

@

<<construct-dataframe, eval=NewCoefficients>>=

ReloadData <- FALSE
# ReloadData <- TRUE
Project <- "ORCAS"
Data <- data.frame()
if (ReloadData) {
  for (flt in 1:19) {
    if (flt == 12) {next}  ## file is bad
    fname = sprintf("%s%s/%srf%02d.nc", DataDirectory(),Project,Project,flt)
    fno <- flt
    D <- getNetCDF (fname, VarList, F=fno)
    D$QR <- D$ADIFR / D$QCF
    D$QR[D$QCF < 20] <- NA
    D$QR[is.infinite(D$QR)] <- NA
    D$AOAREF <- (D$PITCH - (D$GGVSPD / D$TASF) * (180 / pi)) 
    D$M <- MachNumber (D$PSF, D$QCF)
    D$WICS <- SmoothInterp (D$WIC)
    CutoffFreq <- 600
    Rate <- 1
    D$AOAREFS <- zoo::na.approx (as.vector(D$AOAREF), maxgap=1000*Rate, na.rm = FALSE)
    D$AOAREFS[is.na(D$AOAREFS)] <- 0
    D$AOAREFS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$AOAREFS)
    D$AOAREFF <-  D$AOAREF - D$AOAREFS
    D$QRS <- zoo::na.approx (as.vector(D$QR), maxgap=1000*Rate, na.rm = FALSE)
    D$QRS[is.na(D$QRS)] <- 0
    D$QRS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QRS)
    D$QRF <-  D$QR - D$QRS
    D$QCFS <- zoo::na.approx (as.vector(D$QCF), maxgap=1000*Rate, na.rm = FALSE)
    D$QCFS[is.na(D$QCFS)] <- 0
    D$QCFS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QCFS)
    D$MS <- zoo::na.approx (as.vector(D$M), maxgap=1000*Rate, na.rm = FALSE)
    D$MS[is.na(D$MS)] <- 0
    D$MS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$MS)
    D$MF <-  D$M - D$MS
    ## limit to times between first TASX > 90 and last TASX > 90:
    TS <- D$Time[D$TASX > 90]
    TS <- TS[!is.na(TS)]
    B <- TS[1]; E <- TS[length(TS)]
    D <- D[D$Time >= B & D$Time <= E,]
    Data <- rbind (Data, D)
  }
  save(Data, file='AKRDforORCAS.Rdata')
  Data$RF <- Data$RF + 100
  Data1 <- Data
  Data <- data.frame()
  Project <- 'CSET'
  for (flt in 1:16) {
    fname = sprintf("%s%s/%srf%02d.nc", DataDirectory(),Project,Project,flt)
    fno <- flt
    D <- getNetCDF (fname, VarList, F=fno)
    D$QR <- D$ADIFR / D$QCF
    D$QR[D$QCF < 20] <- NA
    D$QR[is.infinite(D$QR)] <- NA
    D$AOAREF <- (D$PITCH - (D$GGVSPD / D$TASF) * (180 / pi)) 
    D$M <- MachNumber (D$PSF, D$QCF)
    D$WICS <- SmoothInterp (D$WIC)
    CutoffFreq <- 600
    Rate <- 1
    D$AOAREFS <- zoo::na.approx (as.vector(D$AOAREF), maxgap=1000*Rate, na.rm = FALSE)
    D$AOAREFS[is.na(D$AOAREFS)] <- 0
    D$AOAREFS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$AOAREFS)
    D$AOAREFF <-  D$AOAREF - D$AOAREFS
    D$QRS <- zoo::na.approx (as.vector(D$QR), maxgap=1000*Rate, na.rm = FALSE)
    D$QRS[is.na(D$QRS)] <- 0
    D$QRS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QRS)
    D$QRF <-  D$QR - D$QRS
    D$QCFS <- zoo::na.approx (as.vector(D$QCF), maxgap=1000*Rate, na.rm = FALSE)
    D$QCFS[is.na(D$QCFS)] <- 0
    D$QCFS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QCFS)
    D$MS <- zoo::na.approx (as.vector(D$M), maxgap=1000*Rate, na.rm = FALSE)
    D$MS[is.na(D$MS)] <- 0
    D$MS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$MS)
    D$MF <-  D$M - D$MS
    ## limit to times between first TASX > 90 and last TASX > 90:
    TS <- D$Time[D$TASX > 90]
    TS <- TS[!is.na(TS)]
    B <- TS[1]; E <- TS[length(TS)]
    D <- D[D$Time >= B & D$Time <= E,]
    Data <- rbind (Data, D)
  }
  save(Data, file='AKRDforCSET.Rdata')
  Data1 <- rbind (Data1, Data)
  Data <- data.frame()
  Project <- 'DEEPWAVE'
  for (flt in 1:26) {
    fname = sprintf("%s%s/%srf%02d.nc", DataDirectory(),Project,Project,flt)
    fno <- flt
    D <- getNetCDF (fname, VarList, F=fno)
    D$QR <- D$ADIFR / D$QCF
    D$QR[D$QCF < 20] <- NA
    D$QR[is.infinite(D$QR)] <- NA
    D$AOAREF <- (D$PITCH - (D$GGVSPD / D$TASF) * (180 / pi)) 
    D$M <- MachNumber (D$PSF, D$QCF)
    D$WICS <- SmoothInterp (D$WIC)
    CutoffFreq <- 600
    Rate <- 1
    D$AOAREFS <- zoo::na.approx (as.vector(D$AOAREF), maxgap=1000*Rate, na.rm = FALSE)
    D$AOAREFS[is.na(D$AOAREFS)] <- 0
    D$AOAREFS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$AOAREFS)
    D$AOAREFF <-  D$AOAREF - D$AOAREFS
    D$QRS <- zoo::na.approx (as.vector(D$QR), maxgap=1000*Rate, na.rm = FALSE)
    D$QRS[is.na(D$QRS)] <- 0
    D$QRS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QRS)
    D$QRF <-  D$QR - D$QRS
    D$QCFS <- zoo::na.approx (as.vector(D$QCF), maxgap=1000*Rate, na.rm = FALSE)
    D$QCFS[is.na(D$QCFS)] <- 0
    D$QCFS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QCFS)
    D$MS <- zoo::na.approx (as.vector(D$M), maxgap=1000*Rate, na.rm = FALSE)
    D$MS[is.na(D$MS)] <- 0
    D$MS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$MS)
    D$MF <-  D$M - D$MS
    ## limit to times between first TASX > 90 and last TASX > 90:
    TS <- D$Time[D$TASX > 90]
    TS <- TS[!is.na(TS)]
    B <- TS[1]; E <- TS[length(TS)]
    D <- D[D$Time >= B & D$Time <= E,]
    Data <- rbind (Data, D)
  }
  save(Data, file='AKRDforDEEPWAVE.Rdata')
  Data$RF <- Data$RF + 200
  Data <- rbind (Data1, Data)
} else {
  load(file='AKRDforORCAS.Rdata')
  Data1 <- Data
  Data1$RF <- Data1$RF + 100
  load(file='AKRDforCSET.Rdata')
  Data <- rbind (Data, Data1)
  Data1 <- Data
  load(file='AKRDforDEEPWAVE.Rdata')
  Data$RF <- Data$RF + 200
  Data <- rbind (Data, Data1)
}

DF <- data.frame()
best <- c(1,2,3,6,8,9,11,14,18)+100
for (flt in best) {
  if (flt == 112) {next}
  D <- Data[Data$RF == flt, ]
  D <- D[601:(nrow(D)-600), ]
  DF <- rbind (DF, D)
} 
best <- c(1,2,3,4,6,10,12,16)
for (flt in best) {
  D <- Data[Data$RF == flt, ]
  D <- D[601:(nrow(D)-600), ]
  DF <- rbind (DF, D)
} 
best <- c(1,2,3,4,5,8,9,10,11,12,13,14,16,17,18,19,20,21,22,24,25,26) + 200
for (flt in best) {
  if (flt == 112) {next}
  D <- Data[Data$RF == flt, ]
  D <- D[601:(nrow(D)-600), ]
  DF <- rbind (DF, D)
} 

DF <- DF[DF$TASX > 110 & abs(DF$ROLL) < 2, ]
## now have data.frame DF containing values for fitting

@

<<fits-to-DF>>=

if (NewCoefficients) {
  f <- lm (AOAREF ~ QR + I(QR*M), data=DF)
  cf <- coef(f)
  ff <- lm (AOAREFF ~ 0 + QRF, data=DF)
  cffn <- coef (ff)
  cff <- 21.481   ## force DEEPWAVE value
  fs <- lm(AOAREFS~QRS+QCFS, data=DF)
  cfs <- coef(fs)
  save (cffn, cff, cfs, ff, fs, file='AKRD-fit-coef.Rdata')
} else {
  load (file='AKRD-fit-coef.Rdata')
}
  SummarizeFit <- function(ft) {
    print (summary(ft)$call)
    print ("Coefficients:")
    print (summary(ft)$coefficients)
    print (sprintf ("Residual standard deviation: %.3f, dof=%d", summary(ft)$sigma, summary(ft)$df[2]))
    print (sprintf ("R-squared %.3f", summary(ft)$r.squared))
  }

@

\section*{Fit results}

The result of fitting using (\ref{eq:alpha-fast}) was $c_{1}=$\Sexpr{round(cffn,4)},
but an earlier fit to more selective speed-run and other data in DEEPWAVE
suggested a value of $c_{1}=21.481$, as described in the NCAR Technical
Note on Wind Uncertainty. That appears to provide a good representation
of the CSET/ORCAS data as well, so that coefficient will be used here.
For the low-pass component, the coefficients from the fit to (\ref{eq:alpha-slow})
were \{$d$\} = \{\Sexpr{round(cfs[1], 4)}, \Sexpr{round(cfs[2], 4)},
\Sexpr{round(cfs[3], 6)}\}, and the residual standard deviation for
this fit was \Sexpr{round(summary(fs)$sigma, 3)}. These results are
discussed further in a presentation that is available {[}need links
here and to TN{]} here, where the choice for $c_{1}$ is also explained.

\section*{New values for the vertical wind}

To a good approximation, the new vertical wind can be calculated from
the old wind using this formula:

\texttt{WIY = WIC + (AK - AKRD) {*} TASX {*} $\pi$ / 180}

where AK is the new angle of attack. However, this will no be valid
in turns, so it is worthwhile to repeat the full wind calculation.
Another reason for doing this is that the GPS-antenna location can
be used in the new calculation. Therefore, the vertical component
of the wind is recalculated that way in this routine, using the Ranadu
function ``WindProcessor()''.

In addition, a new variable named WIF was calculated as the high-pass-filtered
version of WIY.

<<new_wind, include=TRUE, eval=NewCoefficients>>=

Data$AK <- cff * Data$QRF + cfs[1] + cfs[2] * Data$QRS + cfs[3] * Data$QCFS
DataW <- Data
DataW$ATTACK <- Data$AK
DataW <- Ranadu::WindProcessor (DataW)
Data$WIY <- DataW$WIN
# Data$WIZ <- Data$WIC + (Data$AK - Data$AKRD) * Data$TASF * pi / 180  ## for comparison
Data$WIYS <- zoo::na.approx (as.vector (Data$WIY), maxgap=1000, na.rm=FALSE)
Data$WIYS[is.na(Data$WIYS)] <- 0
Rate <- 1
CutoffFreq <- 600 * Rate
Data$WIYS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), Data$WIYS)
Data$WIF <-  Data$WIY - Data$WIYS

@

\section*{Adding variables to the netCDF file}

At this point, appropriate coefficients are available to use when
calculating the vertical wind. A set of projects for which to do this
calculation is defined in the variable 'ReviseProjects' that is included
in the first R-chunk in this program. For this run, that variable
was set to be \{\Sexpr{sprintf('%s', ReviseProjects)}\}. The approach
here is to loop through all the available files, make a copy of each
with the name suffix ``F'', and recalculate the wind variables for
each of those files. The recalculation uses the coefficients determined
above and creates three new variables, ``WIY'', ``WIF'', and ``AKY'',
to represent the new vertical wind based on the complementary filter,
the high-pass-filtered version of that new variable, and the angle
of attack on which the new vertical wind is based. For each flight,
the vertical wind is re-calculated using that new variable for angle
of attack and using the Ranadu function 'WindProcessor()' which includes
correction for the GPS antenna location (for the GV). The new variables
are created with some appropriate attributes, but they are missing
some standard ones also like the range of values. 

The R routines for manipulation of netCDF files are used for this
process, especially those in the package ncdf4 which includes nc\_open(),
nc\_close(), and other functions for accessing and modifying the netCDF
files. The processing is fairly slow, taking about 20~min on my home
linux computer to process all 34 files in CSET and ORCAS. Much of
the time appears to be used in routines that manipulate the attributes,
so this may be an area to target if it becomes important to make this
routine run faster.
\begin{center}
\textsf{\textcolor{blue}{\textendash{} End of Memo \textendash{}}}
\par\end{center}

<<copy-original-file>>=

# Project <- 'CSET'
# files.CSET <- list.files(sprintf('%s%s', Directory, Project), sprintf ('%srf...nc', Project))
# Project <- 'ORCAS'
# files.ORCAS <- list.files(sprintf('%s%s', Directory, Project), sprintf ('%srf...nc', Project))
# files.ALL <- c(files.CSET, files.ORCAS)
# Project <- 'DEEPWAVE'
# files.DEEPWAVE <- list.files (sprintf ('%s%s', Directory, Project), sprintf ('%srf...nc$', Project))
# Project <- 'HCRTEST'
# files.HCRTEST <- list.files (sprintf ('%s%s', Directory, Project), sprintf ('%srf...nc$', Project))
# Project <- 'CONTRAST'
# files.CONTRAST <- list.files (sprintf ('%s%s', Directory, Project), sprintf ('%srf...nc$', Project))
# files.ALL <- c(files.DEEPWAVE, files.CSET, files.ORCAS, files.HCRTEST, files.CONTRAST)
files.ALL <- vector()
for (Project in ReviseProjects) {
  files.ALL <- c(files.ALL, list.files (sprintf ('%s%s', Directory, Project), sprintf ('%srf...nc$', Project)))
}
for (file.name in files.ALL) {
  if (file.name == 'ORCASrf12.nc') {next}
  Project <- ''
  Project <- sub ('rf.*', '', file.name)
  fname <- sprintf ("%s%s/%s", Directory, Project, file.name)
  new.name <- sub ('.nc', 'F.nc', file.name)
  fnew <- sprintf ('%s%s/%s', Directory, Project, new.name)
  ## beware: overwrites without warning!!
  Z <- file.copy (fname, fnew, overwrite=TRUE)  ## BEWARE: overwrites without warning!!
}
# function to copy attributes from old variable (e.g., WIC) to new one (e.g., WIF)
copy_attributes <- function (atv, v, nfile) {
  for (i in 1:length(atv)) {
    aname <- names(atv[i])
    if (grepl ('name', aname)) {next}  # skips long and standard names
    if (grepl ('units', aname)) {next}
    if (grepl ('Dependencies', aname)) {next}
    if (grepl ('actual_range', aname)) {next}
    if (is.numeric (atv[[i]])) {
      ncatt_put (nfile, v, attname=aname, attval=as.numeric(atv[[i]]))
    } else {
      ncatt_put (nfile, v, attname=aname, attval=as.character (atv[[i]]))
    }
  }
}

@

<<modify-netCDF-file, include=TRUE>>=

VarListRef <- VarList
for (file.name in files.ALL) {
  if (file.name == 'ORCASrf12.nc') {next}
  Project <- sub ('rf.*', '', file.name)
  fname <- sprintf ("%s%s/%s", Directory, Project, file.name)
  print (sprintf (' processing file %s', file.name))
  FI <- DataFileInfo (fname)
  VarList <- VarListRef
  if ('GGVSPD' %in% FI$Variables) {
  } else if ('GGVSPDB' %in% FI$Variables) {
    VarList [which (VarList == 'GGVSPD')] <- 'GGVSPDB'
  } else if ('VSPD_A' %in% FI$Variables) {
    VarList [which (VarList == 'GGVSPD')] <- 'VSPD_A'
  } else if ('VSPD_G' %in% FI$Variables) {
    VarList [which (VarList == 'GGVSPD')] <- 'VSPD_G'
  } else {
    print ('ERROR: no VSPD variable found')
    exit()
  }
  next.flag <- FALSE
  for (Var in VarList) {
    if (!(Var %in% FI$Variables)) {
      print (sprintf (' required variable %s not found in file %s; skipping...', Var, fname))
      next.flag <- TRUE
      break
    }
  }
  if (next.flag) {next}
  D <- getNetCDF (fname, VarList)
  new.name <- sub ('.nc', 'F.nc', file.name)
  fnew <- sprintf ('%s%s/%s', Directory, Project, new.name)
  netCDFfile <- nc_open (fnew, write=TRUE) 
  Rate <- 1
  Dimensions <- attr (D, "Dimensions")
  Dim <- Dimensions[["Time"]]
  if ("sps25" %in% names (Dimensions)) {
    Rate <- 25
    Dim <- list(Dimensions[["sps25"]], Dimensions[["Time"]])
  }
  if ("sps50" %in% names (Dimensions)) {
    Rate <- 50
    Dim <- list(Dimensions[["sps50"]], Dimensions[["Time"]])
  }
  CutoffFreq <- 600 * Rate
  D$QR <- D$ADIFR / D$QCF
  D$QR[D$QCF < 20] <- NA
  D$QR[is.infinite(D$QR)] <- NA
  if ('GGVSPD' %in% VarList) {
    D$AOAREF <- (D$PITCH - (D$GGVSPD / D$TASF) * (180 / pi)) 
  } else if ('GGVSPDB' %in% VarList) {
    D$AOAREF <- (D$PITCH - (D$GGVSPDB / D$TASF) * (180 / pi))
  } else if ('VSPD_A' %in% VarList) {
      D$AOAREF <- (D$PITCH - (D$VSPD_A / D$TASF) * (180 / pi))
  } else if ('VSPD_G' %in% VarList) {
      D$AOAREF <- (D$PITCH - (D$VSPD_G / D$TASF) * (180 / pi))
  }
  D$M <- MachNumber (D$PSF, D$QCF)
  D$WICS <- SmoothInterp (D$WIC)
  CutoffFreq <- 600 * Rate
  D$AOAREFS <- zoo::na.approx (as.vector(D$AOAREF), maxgap=1000*Rate, na.rm = FALSE)
  D$AOAREFS[is.na(D$AOAREFS)] <- 0
  D$AOAREFS2 <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$AOAREFS)
  D$AOAREFS1 <- signal::filter (signal::butter (3, 1/CutoffFreq), D$AOAREFS)
  D$AOAREFF <-  D$AOAREF - D$AOAREFS2
  D$AOAREFF1 <-  D$AOAREF - D$AOAREFS1
  D$QRS <- zoo::na.approx (as.vector(D$QR), maxgap=1000*Rate, na.rm = FALSE)
  D$QRS[is.na(D$QRS)] <- 0
  D$QRS2 <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QRS)
  D$QRS1 <- signal::filter (signal::butter (3, 1/CutoffFreq), D$QRS)
  D$QRS <- D$QRS2
  D$QRF <-  D$QR - D$QRS2
  D$QRF1 <- D$QR - D$QRS1
  D$QCFS <- zoo::na.approx (as.vector(D$QCF), maxgap=1000*Rate, na.rm = FALSE)
  D$QCFS[is.na(D$QCFS)] <- 0
  D$QCFS2 <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$QCFS)
  D$QCFS1 <- signal::filter (signal::butter (3, 1/CutoffFreq), D$QCFS)
  D$QCFS <- D$QCFS2
  D$MS <- zoo::na.approx (as.vector(D$M), maxgap=1000*Rate, na.rm = FALSE)
  D$MS[is.na(D$MS)] <- 0
  D$MS <- signal::filtfilt (signal::butter (3, 1/CutoffFreq), D$MS)
  D$MF <-  D$M - D$MS
  D$AK <- cff * D$QRF + cfs[1] + cfs[2] * D$QRS + cfs[3] * D$QCFS
  D$AK1 <- cff * D$QRF1 + cfs[1] + cfs[2] * D$QRS1 + cfs[3] * D$QCFS1
  DataW <- D
  DataW$ATTACK <- D$AK
  DataW <- Ranadu::WindProcessor (DataW)
  D$WIY <- DataW$WIN
  DataW <- D
  DataW$ATTACK <- D$AK1
  DataW <- Ranadu::WindProcessor (DataW)
  D$WIS <- DataW$WIN
  d <- zoo::na.approx (as.vector(D$WIY), maxgap=100*Rate, na.rm = FALSE)
  d[is.na(d)] <- 0
  D$WIF <- D$WIY - signal::filtfilt( signal::butter (3, 1/CutoffFreq), d)
  ## now have WIF, WIY, WIS and AK, variables with new values to add
  varF <- ncvar_def ("WIF", 
                    units="m/s", 
                    dim=Dim, 
                    missval=as.single(-32767.), prec='float', 
                    longname="WIY, high-pass-filtered")
  varX <- ncvar_def ("WIY", 
                    units="m/s", 
                    dim=Dim, 
                    missval=as.single(-32767.), prec='float', 
                    longname="vertical wind via complementary filter")
  varS <- ncvar_def ("WIS", 
                    units="m/s", 
                    dim=Dim, 
                    missval=as.single(-32767.), prec='float', 
                    longname="vertical wind like WIY but single-pass")
  varY <- ncvar_def ("AKY", 
                    units="degrees", 
                    dim=Dim, 
                    missval=as.single(-32767.), prec='float', 
                    longname="angle of attack, comp-filter")
  newfile <- ncvar_add (netCDFfile, varF)
  newfile <- ncvar_add (newfile, varX)
  newfile <- ncvar_add (newfile, varS)
  newfile <- ncvar_add (newfile, varY)

  ATV <- ncatt_get (netCDFfile, "WIC")
  V <- "WIF"
  copy_attributes (ATV, V, newfile)
  ncatt_put (newfile, V, attname="standard_name", 
             attval="filtered_vertical_wind")
  ncatt_put (newfile, V, attname="Dependencies", 
             attval="1 WIY")
  ncatt_put (newfile, V, attname="filter_time_constant",
             attval=sprintf("%d s", CutoffFreq))

  V <- "WIY"
  copy_attributes (ATV, V, newfile)
  ncatt_put (newfile, V, attname="standard_name", 
             attval="vertical_wind_comp_filter")
  ncatt_put (newfile, V, attname="Dependencies", 
             attval="1 WIC AKY")
V <- "WIS"
  copy_attributes (ATV, V, newfile)
  ncatt_put (newfile, V, attname="standard_name", 
             attval="vertical_wind_comp_filter_1")
  ncatt_put (newfile, V, attname="Dependencies", 
             attval="1 WIC AKY")

  V <- "AKY"
  ATV <- ncatt_get (netCDFfile, "AKRD")
  copy_attributes (ATV, V, newfile)
  ncatt_put (newfile, V, attname="standard_name", 
             attval="angle_of_attack_comp_filter")
  ncatt_put (newfile, V, attname="Dependencies", 
             attval="1 ADIFR QCF")
  ncatt_put (newfile, V, attname="filter_time_constant",
             attval=sprintf("%d s", CutoffFreq))
  ncatt_put (newfile, V, attname="CalibrationCoefficients",
             # attval="c(20.986, 4.6245, 18.9965, -0.0034135)")
             attval=sprintf('c(%f.3, %f.4, %f.4, %f.7)', cff, cfs[1], cfs[2], cfs[3]))

  if (Rate == 1) {
    ncvar_put (newfile, varF, D$WIF)
    ncvar_put (newfile, varX, D$WIY)
    ncvar_put (newfile, varS, D$WIS)
    ncvar_put (newfile, varY, D$AK)
  } else if (Rate == 25) {
    ncvar_put (newfile, varF, D$WIF, count=c(25, nrow(D)/25))
    ncvar_put (newfile, varX, D$WIY, count=c(25, nrow(D)/25))
    ncvar_put (newfile, varS, D$WIS, count=c(25, nrow(D)/25))
    ncvar_put (newfile, varY, D$AK, count=c(25, nrow(D)/25))
  } else if (Rate == 50) {
    ncvar_put (newfile, varF, D$WIF, count=c(50, nrow(D)/50))
    ncvar_put (newfile, varX, D$WIY, count=c(50, nrow(D)/50))
    ncvar_put (newfile, varS, D$WIS, count=c(50, nrow(D)/50))
    ncvar_put (newfile, varY, D$AKY, count=c(50, nrow(D)/50))
  }
  nc_close (newfile)
}

@

\vskip0.5truein \centerline{\textcolor{blue}{---- END ----}}

%\attach{attachment}

%\attachm{first\\second}

%\cc{first attachment\\second\\3rd att}
\end{document}
