%% LyX 2.1.4 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[12pt]{article}
\usepackage{mathptmx}
\usepackage[T1]{fontenc}
\usepackage[letterpaper]{geometry}
\geometry{verbose,tmargin=3.54cm,bmargin=2.54cm,lmargin=2.54cm,rmargin=2.54cm,headheight=1cm,headsep=2cm,footskip=0.5cm}
\usepackage{fancyhdr}
\pagestyle{fancy}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{color}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\input colordvi
\usepackage{color}
\fancyhead{}
\fancyfoot[CE,CO]{}
\newtoks{\addressee} \global\addressee={}
\newdimen\longindent \longindent=3.5truein
\fancyhead[L]{Memo to: \the\addressee \\ \datetoday \\ Page \thepage \hfill}
\renewcommand{\headrulewidth}{0.0pt}
\newenvironment{lyxlist}[1]
{\begin{list}{}
{\settowidth{\labelwidth}{#1}
\setlength{\leftmargin}{\labelwidth}
\addtolength{\leftmargin}{\labelsep}
\renewcommand{\makelabel}[1]{##1\hfil}}}
{\end{list}}
\newcommand{\datetoday}{\number\day\space
     \ifcase\month\or January\or February\or March\or April\or May\or
     June\or July\or August\or September\or October\or November\or
     December\fi
     \space\number\year}
\newcommand{\EOLmemo}{\null \vskip-1.5truein
{\raggedright \textsf{\textsc{\large \textcolor{blue}{Earth Observing Laboratory}}}}\par
{\raggedright \textsf{\textsl{\textcolor{blue}{Memorandum:}}}} \par \vskip6pt
{\color{blue}{\hrule}}\par
\vskip0.3truein \leftline{\hskip \longindent \datetoday} \vskip0.2truein
\thispagestyle{empty}}
\newcommand{\attachm}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachments:] {#1}
\end{lyxlist}}
\newcommand{\cc}[1]{\begin{lyxlist}{Attachments:00}
\item [cc:] {#1}
\end{lyxlist}}
\newcommand{\attach}[1]{\begin{lyxlist}{Attachments:00}
\item [Attachment:] {#1}
\end{lyxlist}}
%usage: \encl{A\\B\\C} or \cc{ma,e1\\name2\\name3}

\makeatother

\begin{document}
\EOLmemo 

\global\addressee={HIPPO reprocessing file}  % >>change "File" to the "To:" name desired

\begin{tabular}{ll}
\textsf{\textsc{\textcolor{blue}{To:}}} & \the\addressee\tabularnewline
\textsf{\textsc{\textcolor{blue}{From:}}} & Al Cooper\tabularnewline
\textsf{\textsc{\textcolor{blue}{Subject:}}} & Filtered vertical wind variable WIF\tabularnewline
\end{tabular}

\bigskip

<<initialization,echo=FALSE,include=FALSE>>=

require(knitr)
opts_chunk$set(echo=FALSE, include=FALSE, fig.lp="fig:")
opts_chunk$set(fig.width=6, fig.height=5, fig.pos="center", digits=4)
thisFileName <- "FilterForWIC"
require(Ranadu, quietly = TRUE, warn.conflicts=FALSE)
require(ggplot2)
require(grid)
require(ggthemes)
require(ncdf4)
run.args <- commandArgs (TRUE)
Directory <- DataDirectory ()
Flight <- "rf02" 			   # XXX change this or use command arguments
Project = "HIPPO-5"			 # XXX change this or use command arguments
ProjectDir <- "HIPPO"
Wchoice <- "WIF"                #default choice for WIX is WIF
if (length (run.args) > 0) {Project <- run.args[1]}
if (length (run.args) > 1) {Flight <- run.args[2]}
if (length (run.args) > 2) {Wchoice <- run.args[3]}
if (!Wchoice %in% c("WIF", "WIC")) {
  print (sprintf ("invalid argument %s for Wchoice; exiting", Wchoice))
  quit(save="no")
}
CutoffFreq <- 600
if (length (run.args) > 3) {CutoffFreq <- numeric(run.args[4])}
fname = sprintf("%s%s/%s%s.nc", Directory,ProjectDir,Project,Flight)
fnew  = sprintf("%s%s/%s%sF.nc", Directory,ProjectDir,Project,Flight)

## beware: overwrites without warning!!
Z <- file.copy (fname, fnew, overwrite=TRUE)  ## BEWARE: overwrites without warning!!

SaveRData <- sprintf("%s.Rdata", thisFileName)
ReloadData <- TRUE    ## can only use FALSE with repeat of same flight
if (ReloadData) {
  Data <- getNetCDF (fname, c("WIC"))		#XXX set variables needed here
  save(Data, file=SaveRData)
} else {
  load (SaveRData)
}

@

<<get-netCDF-file, include=TRUE>>=

netCDFfile <- nc_open (fnew, write=TRUE) 
Rate <- 1
Dimensions <- attr (Data, "Dimensions")
Dim <- Dimensions[["Time"]]
if ("sps25" %in% names (Dimensions)) {
  Rate <- 25
  Dim <- list(Dimensions[["sps25"]], Dimensions[["Time"]])
}
if ("sps50" %in% names (Dimensions)) {
  Rate <- 50
  Dim <- list(Dimensions[["sps50"]], Dimensions[["Time"]])
}

@

This script applies a high-pass filter to the vertical wind variable
WIC and produces a new variable WIF. Another new variable called WIX
is included and is set to either WIC or WIF, the former when it appears
adequate and the latter when filtering leads to enough improvement
to make WIF a better choice for vertical-wind variable.

This memo is for the \Sexpr{Project} project, flight \Sexpr{Flight},
for which the variable WIX is set to \Sexpr{Wchoice}. The following
shows the very simple R statements that implement a 3rd-order high-pass
Butterworth filter, after some protection against missing values in
the original data. The result is a new variable WIF, plotted below.

<<filter-WIC, include=TRUE, fig.cap="Comparison of unfiltered and filtered values for the vertical wind.", echo=TRUE>>=

CutoffFreq <- 600 * Rate    ## Rate is defined above, 
                            ## 1 or 25 for std or high-rate file
d <- zoo::na.approx (as.vector(Data$WIC), maxgap=100*Rate, na.rm = FALSE)
d[is.na(d)] <- 0
Data$WIF <- Data$WIC - signal::filtfilt( signal::butter (3, 1/CutoffFreq), d)
plotWAC(Data[, c("Time", "WIC", "WIF")]) 
title(sprintf("Project %s Flight %s", Project, Flight))

@

<<add-to-netCDF-file>>=

# copy attributes from old variable (e.g., WIC) to new one (e.g., WIF)
copy_attributes <- function (atv, v, nfile) {
  for (i in 1:length(atv)) {
    aname <- names(atv[i])
    if (grepl ('name', aname)) {next}  # skips long and standard names
    if (grepl ('units', aname)) {next}
    if (grepl ('Dependencies', aname)) {next}
    if (grepl ('actual_range', aname)) {next}
    if (is.numeric (atv[[i]])) {
      ncatt_put (nfile, v, attname=aname, attval=as.numeric(atv[[i]]))
    } else {
      ncatt_put (nfile, v, attname=aname, attval=as.character (atv[[i]]))
    }
  }
}

varF <- ncvar_def ("WIF", 
                    units="m/s", 
                    dim=Dim, 
                    missval=as.single(-32767.), prec='float', 
                    longname="WIC, high-pass-filtered")
varX <- ncvar_def ("WIX", 
                    units="m/s", 
                    dim=Dim, 
                    missval=as.single(-32767.), prec='float', 
                    longname="preferred variable for vertical wind")
newfile <- ncvar_add (netCDFfile, varF)
newfile <- ncvar_add (newfile, varX)

ATV <- ncatt_get (netCDFfile, "WIC")
V <- "WIF"
copy_attributes (ATV, V, newfile)
ncatt_put (newfile, V, attname="standard_name", 
           attval="filtered_vertical_wind")
ncatt_put (newfile, V, attname="Dependencies", 
           attval="1 WIC")
ncatt_put (newfile, V, attname="filter_time_constant",
           attval=sprintf("%d s", CutoffFreq))

V <- "WIX"
copy_attributes (ATV, V, newfile)
ncatt_put (newfile, V, attname="standard_name", 
           attval="best_vertical_wind")
ncatt_put (newfile, V, attname="Dependencies", 
           attval=sprintf ("1 %s", Wchoice))
if (Rate == 1) {
  ncvar_put (newfile, varF, Data$WIF)
  ncvar_put (newfile, varX, Data[, Wchoice])
} else if (Rate == 25) {
  ncvar_put (newfile, varF, Data$WIF, count=c(25, nrow(Data)/25))
  ncvar_put (newfile, varX, Data[, Wchoice], count=c(25, nrow(Data)/25))
} else if (DataRate == 50) {
  ncvar_put (newfile, varF, Data$WIF, count=c(50, nrow(Data)/50))
  ncvar_put (newfile, varX, Data[, Wchoice], count=c(50, nrow(Data)/50))
}
nc_close (newfile)

@

The existing data file is then copied to a new file named {[}oldName{]}F.nc,
and two variables are added to that file along with appropriate variable
attributes:
\begin{itemize}
\item WIF, which is WIC after high-pass filtering
\item WIX, which is either WIC or WIF depending on which appears to be better.
The default is WIF.
\end{itemize}
\clearpage

\begin{center}
\textsf{\textcolor{blue}{-- End of Memo --}}
\par\end{center}

Reproducibility:

\begin{tabular}{ll}
\textsf{\textsc{\textcolor{blue}{Project:}}} & \Sexpr{thisFileName}\tabularnewline
\textsf{\textsc{\textcolor{blue}{Archive package:}}} & \Sexpr{thisFileName}.zip\tabularnewline
\textsf{\textsc{\textcolor{blue}{Contains:}}} & attachment list below\tabularnewline
\textsf{\textsc{\textcolor{blue}{Program:}}} & \Sexpr{thisFileName}.Rnw\tabularnewline
\textsf{\textsc{\textcolor{blue}{Original Data:}}} & /scr/raf\_data/\Sexpr{Project}/\Sexpr{Flight}.nc \tabularnewline
\textsf{\textsc{\textcolor{blue}{Workflow:}}} & Workflow\Sexpr{thisFileName}.pdf\tabularnewline
\textsf{\textsc{\textcolor{blue}{Git:}}} & https://github.com/WilliamCooper/Reprocessing/blob/master/\Sexpr{thisFileName}.zip\tabularnewline
\end{tabular}

\attachm{\Sexpr{thisFileName}.Rnw\\\Sexpr{thisFileName}.pdf\\DGF.dot\\\Sexpr{SaveRData}\\Workflow\Sexpr{thisFileName}.pdf\\SessionInfo}
%\cc{first attachment\\second\\3rd att}
%\attach{attachment}
%\attachm{first\\second} %\cc{first attachment\\second\\3rd att}
<<save-system-info, echo=FALSE>>= 
cat (toLatex(sessionInfo()), file="SessionInfo")

@ 
<<make-zip-archive, echo=TRUE, INCLUDE=TRUE, eval=TRUE>>=
system (sprintf("zip %s.zip %s.Rnw %s.pdf Workflow%s.pdf DGF.dot SessionInfo %s", thisFileName, thisFileName, thisFileName, thisFileName, SaveRData))

@ 

<<make-workflow-diagram, echo=FALSE, eval=FALSE>>=

library(DiagrammeR)
grViz ("DGF.dot", engine='dot')

@
% \attach{attachment}

% \attachm{ProgramFile\\Document.pdf\\SaveRData}

%\cc{first attachment\\second\\3rd att}
\end{document}
